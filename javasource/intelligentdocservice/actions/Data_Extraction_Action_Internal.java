// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package intelligentdocservice.actions;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.thirdparty.org.json.JSONArray;
import com.mendix.thirdparty.org.json.JSONObject;

public class Data_Extraction_Action_Internal extends CustomJavaAction<java.lang.String>
{
	private java.lang.String Import_Mapping_By_Maker;
	private java.lang.String Task_Status_Response;
	private java.lang.String Model_Id;

	public Data_Extraction_Action_Internal(IContext context, java.lang.String Import_Mapping_By_Maker, java.lang.String Task_Status_Response, java.lang.String Model_Id)
	{
		super(context);
		this.Import_Mapping_By_Maker = Import_Mapping_By_Maker;
		this.Task_Status_Response = Task_Status_Response;
		this.Model_Id = Model_Id;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		java.lang.String extractionStatus;
		
		//If status is completed
		if((new JSONObject(this.Task_Status_Response)).get("Status").equals("COMPLETED")) {
			
			//get SimplifiedExtractedData
			String simplifiedJson = jsonConversion(this.Task_Status_Response, this.Model_Id);
			
			// Use Core. to convert simplifiedJson to Entity via Import_Mapping_By_Maker
			InputStream targetStream = new ByteArrayInputStream(simplifiedJson.getBytes());
			List<IMendixObject> objectList = Core.integration().importStream(getContext(), targetStream, this.Import_Mapping_By_Maker, null, false);
			
			//Use Core.commit to commit the object
			for (IMendixObject iMendixObject : objectList) {
				Core.commit(getContext(), iMendixObject);
			}
			extractionStatus = "COMPLETED";
		} else {
			extractionStatus = "FAILED";
		}
		
		return extractionStatus;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Data_Extraction_Action_Internal";
	}

	// BEGIN EXTRA CODE
	private String jsonConversion(String tsrJson, String modelId){
        
		JSONObject json = new JSONObject(tsrJson);
		Object outputObject = json.get("Output");
        JSONObject outputJson = new JSONObject(outputObject.toString());
        
        JSONObject convertedObject = new JSONObject();
        convertedObject.accumulate("ModelId",modelId);
        
        //ExtractedSection
        LinkedList<Object> convertedExtractedList = new LinkedList<>();
        JSONArray extractedArray = outputJson.getJSONArray("Extracted");
        if(!extractedArray.toCollection().isEmpty()) {
        	for(int i=0; i < extractedArray.length(); i++){
        		
                JSONObject extractedObject = extractedArray.getJSONObject(i);
                JSONArray extractedFieldsArray = extractedObject.getJSONArray("Fields");
                
                JSONObject extractedHolder = new JSONObject();
                JSONObject metadataHolder = new JSONObject();
                metadataHolder.accumulate("DocumentName", extractedObject.get("DocumentName"));
                extractedHolder.accumulate("Metadata", metadataHolder);

                for(int j=0; j < extractedFieldsArray.length(); j++){
									JSONObject object = extractedFieldsArray.getJSONObject(j);
									Map<String,Object> extractedData = new HashMap<>();
									extractedData.put("Value",object.get("FieldValue"));
									extractedData.put("Confidence",object.get("Confidence"));
									extractedHolder.put(object.get("FieldName").toString(),extractedData);
                }
                
                convertedExtractedList.add(extractedHolder);
            }
        }
        
        convertedObject.accumulate("Extracted",convertedExtractedList);
        
        //AbortedSection
        LinkedList<Object> convertedAbortedList = new LinkedList<>();
        JSONArray abortedArray = outputJson.getJSONArray("Aborted");
        JSONObject abortedHolder = new JSONObject();
        if(!abortedArray.toCollection().isEmpty()) {
            
            for(int k=0; k < abortedArray.length(); k++){
                JSONObject object = abortedArray.getJSONObject(k);
                convertedAbortedList.add(object.get("DocumentName"));
            }
            
            abortedHolder.accumulate("Documents", convertedAbortedList);
        }
        convertedObject.accumulate("Aborted", abortedHolder);
        
        return convertedObject.toString();
    }
	// END EXTRA CODE
}
