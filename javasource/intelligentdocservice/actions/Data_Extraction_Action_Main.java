// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package intelligentdocservice.actions;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.TimeZone;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import intelligentdocservice.proxies.constants.Constants;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Data_Extraction_Action_Main extends CustomJavaAction<IMendixObject>
{
	private java.lang.String Model_Id;
	private java.util.List<IMendixObject> __Image_List;
	private java.util.List<system.proxies.Image> Image_List;
	private java.lang.String Mapping;

	public Data_Extraction_Action_Main(IContext context, java.lang.String Model_Id, java.util.List<IMendixObject> Image_List, java.lang.String Mapping)
	{
		super(context);
		this.Model_Id = Model_Id;
		this.__Image_List = Image_List;
		this.Mapping = Mapping;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.Image_List = java.util.Optional.ofNullable(this.__Image_List)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(__Image_ListElement -> system.proxies.Image.initialize(getContext(), __Image_ListElement))
			.collect(java.util.stream.Collectors.toList());

		// BEGIN USER CODE
		java.util.List<IMendixObject> Custom_Image_List = new LinkedList<>();
		for(system.proxies.Image item: Image_List) {
			Custom_Image_List.add(item.getMendixObject());
		}
		
		//calculate hmac
		String usernameTest = Constants.getAccess_Key();
        String secretKeyTest = Constants.getSecret_Key();

		
		// end calculation
		
		HashMap<String, Object> parameters = new HashMap<String,Object>();
		parameters.put("ModelId", this.Model_Id);
		parameters.put("InputImagesList", Custom_Image_List);
		parameters.put("ImportMappingName", this.Mapping);
		ExecutorService exec = Executors.newCachedThreadPool();
		exec.execute(new StartMicroflow(getContext(),"IntelligentDocService.ACT_Extract_Data", parameters));
		
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Data_Extraction_Action_Main";
	}

	// BEGIN EXTRA CODE
	class StartMicroflow implements Runnable{ 
		private IContext context; 
		private Map<String,Object> paramatersChild; 
		private String microflowName;
		
		public StartMicroflow(IContext context, String microflowName, Map<String, Object> paramatersChild){
		    this.context = context.getSession().createContext();
		    this.microflowName = microflowName;
		    this.paramatersChild = paramatersChild;
		}
		
		@Override
		public void run() {
		    try{
		    	com.mendix.core.Core.executeAsync(this.context, this.microflowName,true,this.paramatersChild);
		    }
		    catch(com.mendix.core.CoreException ex){

		    }
		}
	}
	// END EXTRA CODE
}
