// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package main.actions;

import java.lang.reflect.Modifier;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import main.proxies.constants.Constants;

public class SetCloudProvider extends CustomJavaAction<java.lang.Void>
{
	public SetCloudProvider(IContext context)
	{
		super(context);
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		var coreConfig = Core.getConfiguration();
		var constants = getConstants("Main");
		for(var constant: constants) {
			var key = getKey(constant);
			var value = (String) coreConfig.getConstantValue(constant);
			ServiceLocator.setConfiguration(key, value);
		}
		
		ServiceLocator.setConfiguration("TokenEndpoint", Constants.getTokenEndpoint());
		
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "SetCloudProvider";
	}

	// BEGIN EXTRA CODE
	private static String getKey(String constant) {
		constant = constant.substring(constant.indexOf(".") + 1);
		var values = constant.split("_");
		if(values.length > 1) {
			var tmp = Arrays.copyOfRange(values, 1, values.length);
			return String.join(".", tmp);
		}
		
		return constant;
	}
	
	private static Set<String> getConstants(String moduleName) {
		var set = new HashSet<String>();
		try {
			var className = String.format("%s.proxies.constants.Constants", moduleName.toLowerCase());
			var constantClass = Class.forName(className);
			var methods = constantClass.getDeclaredMethods();
			for(var method: methods) {
				var modifiers = method.getModifiers();
				if(Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers)) {
					var returnType = method.getReturnType();
					if(returnType == String.class) {
						var methodName = method.getName();
						if(methodName.startsWith("get")) {
							set.add(String.format("%s.%s", moduleName, methodName.substring(3)));
						}
					}
				}
			}
		} catch (ClassNotFoundException e) {
		}
		
		return set;
	}
	// END EXTRA CODE
}
