// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package textanalytics.actions;

import java.util.ArrayList;
import com.mendix.cognitiveservices.contracts.textanalytics.FeatureFlag;
import com.mendix.cognitiveservices.contracts.textanalytics.Language;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class _CreateDetectorAction extends CustomJavaAction<IMendixObject>
{
	private java.lang.String text;
	private java.lang.String languageCode;
	private java.lang.String detectorType;

	public _CreateDetectorAction(IContext context, java.lang.String text, java.lang.String languageCode, java.lang.String detectorType)
	{
		super(context);
		this.text = text;
		this.languageCode = languageCode;
		this.detectorType = detectorType;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		return this.createDetector();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "_CreateDetectorAction";
	}

	// BEGIN EXTRA CODE
	
	private IMendixObject createDetector() throws CoreException {
		var context = this.getContext();
		var service = ServiceLocator.INSTANCE.getInstance(this.getContext());
		var detectorObject = Core.instantiate(context, detectorType);
		var detector = textanalytics.proxies.Detector.initialize(context, detectorObject);
		detector.setInputText(text);
		var result = service.getSupportedLanguages(getFlag(detector));
		var list = new ArrayList<textanalytics.proxies.Language>();
		textanalytics.proxies.Language defaultLanguage = null;
		String defaultLangCode = languageCode;
		if(!Utils.IsStringValid(defaultLangCode)) {
			defaultLangCode = Utils.getDefaultLangauge(context);
		}
		
		for(var item : result) {
			var language = getLanguage(context, item);
			var code = language.getCode();
			if(defaultLanguage == null && code.equals("en")) {
				defaultLanguage = language;
			}
			
			if(defaultLanguage != language && defaultLangCode.equals(code)) {
				defaultLanguage = language;
			}
			
			list.add(language);
		}
		
		if(defaultLanguage == null) {
			defaultLanguage = list.get(0);
		}
		
		detector.setDetector_InputLanguage(defaultLanguage);
		detector.setDetector_SupportedLanguages(list);
		detector.commit(context);
		return detector.getMendixObject();
	}
	
	private textanalytics.proxies.Language getLanguage(IContext context, Language language) throws CoreException {
		var lang = new textanalytics.proxies.Language(context);
		lang.setCode(language.code);
		lang.setName(language.name);
		lang.commit(context);
		return lang;
	}
	
	private FeatureFlag getFlag(textanalytics.proxies.Detector detector) {
		if(detector instanceof textanalytics.proxies.DominantLanguageDetector) {
			return FeatureFlag.DETECT_DOMINANT_LANGUAGE;
		}
		
		if(detector instanceof textanalytics.proxies.SentimentDetector) {
			return FeatureFlag.DETECT_SENTIMENT;
		}
		
		if(detector instanceof textanalytics.proxies.EntityDetector) {
			return FeatureFlag.DETECT_ENTITIES;
		}
		
		if(detector instanceof textanalytics.proxies.PiiEntityDetector) {
			return FeatureFlag.DETECT_PII_ENTITIES;
		}
		
		if(detector instanceof textanalytics.proxies.KeyPhraseDetector) {
			return FeatureFlag.DETECT_KEY_PHRASES;
		}
		
		if(detector instanceof textanalytics.proxies.SyntaxDetector) {
			return FeatureFlag.DETECT_SYNTAX;
		}
		
		return null;
	}
	// END EXTRA CODE
}
