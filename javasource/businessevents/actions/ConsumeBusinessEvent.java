// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package businessevents.actions;

import com.mendix.databroker.factories.EventConsumerFactory;
import com.mendix.databroker.services.SubscriptionService;
import com.mendix.databroker.utils.ConfigurationProvider;
import com.mendix.databroker.utils.CoreProxyImpl;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

/**
 * This java action starts the subscription to consume a business event from the server/channel configured in the BusinessEvents module constants.
 * 
 * Service name: Name of the service or source system that creates the business events.
 * 
 * Event name: Name of the business event your application should receive.
 * 
 * Event handler: Microflow to process the received event.
 * 
 * Subscribe from beginning: Boolean to determine if you want to receive all the available events (including those sent in the last 7 days) or only new events?
 * 
 * NOTE
 * The ShutdownBusinessEvent action should be configured to be run before shutdown when using this action. This can be done by configuring the BusinessEvents.BSd_ShutdownSubscribers microflow to be called.
 */
public class ConsumeBusinessEvent extends CustomJavaAction<java.lang.Void>
{
	private java.lang.String ServiceName;
	private java.lang.String EventName;
	private java.lang.String EventHandler;
	private java.lang.Boolean SubscribeFromBeginning;

	public ConsumeBusinessEvent(IContext context, java.lang.String ServiceName, java.lang.String EventName, java.lang.String EventHandler, java.lang.Boolean SubscribeFromBeginning)
	{
		super(context);
		this.ServiceName = ServiceName;
		this.EventName = EventName;
		this.EventHandler = EventHandler;
		this.SubscribeFromBeginning = SubscribeFromBeginning;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		ConfigurationProvider configProvider = new ConfigurationProvider(CoreProxyImpl.INSTANCE);
		SubscriptionService subscriptionService = SubscriptionService.Companion.instantiateSubscriptionService(
				configProvider,
				getContext(),
				CoreProxyImpl.INSTANCE,
				EventConsumerFactory.EventConsumerFactoryImpl.INSTANCE
		);

		subscriptionService.registerSubscription(ServiceName, EventName, EventHandler, SubscribeFromBeginning);
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ConsumeBusinessEvent";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
